
#Service information
server.port=9101
spring.application.name=users-service

#Communication with ConfigServer
spring.config.import=optional:configserver:http://localhost:9001

#Actuator monitoring and managing tool setting when app is running
management.endpoints.web.exposure.include=*

##Communication with EurekaServer
eureka.client.service-url.defaultZone=http://localhost:8761/eureka/
eureka.client.fetch-registry=true
eureka.client.register-with-eureka=true
eureka.instance.lease-renewal-interval-in-seconds=60
eureka.instance.lease-expiration-duration-in-seconds=180
eureka.instance.instance-id=${spring.application.name}:${server.port}:${random.value}

#Spring Security Authentication key/ key for quick access
##eureka.client.basic-auth.username=na
##eureka.client.basic-auth.password=ppa
#    #for future debugging ----------------------
#    logging.level.org.springframework.cloud.netflix.eureka=DEBUG
#    logging.level.org.springframework.web.client.RestTemplate=DEBUG







#Communicating with OauthServer
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:9000
jwt.secret=makeThisAVeryLongRandomStringAtLeast32Characters

# Logging
logging.level.org.springframework.security=DEBUG



# OAuth2 client configuration
#spring.security.oauth2.client.registration.myclient.client-id=usersServiceClient
#spring.security.oauth2.client.registration.myclient.client-secret={noop}usersServiceSecret
spring.security.oauth2.client.registration.myclient.client-id=client-id
spring.security.oauth2.client.registration.myclient.client-secret=client-secret
spring.security.oauth2.client.registration.myclient.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.myclient.redirect-uri=http://localhost:9000/login/oauth/code/myclient
spring.security.oauth2.client.registration.myclient.scope=openid,read,write

spring.security.oauth2.client.provider.myclient.authorization-uri=http://localhost:9000/oauth/authorize
spring.security.oauth2.client.provider.myclient.token-uri=http://localhost:9000/oauth/token
spring.security.oauth2.client.provider.myclient.user-info-uri=http://localhost:9000/userinfo
spring.security.oauth2.client.provider.myclient.jwk-set-uri=http://localhost:9000/.well-known/jwks.json


#spring.security.oauth2.client.registration.articles-client-oidc.provider=spring
#spring.security.oauth2.client.registration.articles-client-oidc.client-id=articles-client
#spring.security.oauth2.client.registration.articles-client-oidc.client-secret=secret
#spring.security.oauth2.client.registration.articles-client-oidc.authorization-grant-type=authorization_code
#spring.security.oauth2.client.registration.articles-client-oidc.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
#spring.security.oauth2.client.registration.articles-client-oidc.scope=openid
#spring.security.oauth2.client.registration.articles-client-oidc.client-name=articles-client-oidc
#
#spring.security.oauth2.client.registration.articles-client-authorization-code.provider=spring
#spring.security.oauth2.client.registration.articles-client-authorization-code.client-id=articles-client
#spring.security.oauth2.client.registration.articles-client-authorization-code.client-secret=secret
#spring.security.oauth2.client.registration.articles-client-authorization-code.authorization-grant-type=authorization_code
#spring.security.oauth2.client.registration.articles-client-authorization-code.redirect-uri={baseUrl}/authorized
#spring.security.oauth2.client.registration.articles-client-authorization-code.scope=articles.read
#spring.security.oauth2.client.registration.articles-client-authorization-code.client-name=articles-client-authorization-code
#
#spring.security.oauth2.client.provider.spring.issuer-uri=http://localhost:9000